# -*- coding: utf-8 -*-
"""
F3_infer_mi38_live_3y_any.py ‚Äî Inference residual & t·ªïng h·ª£p % + Notification Discord/Telegram.

- ƒê·ªçc symbols.txt (MASTER)
- Ch·ªâ predict n·∫øu symbol c√≥ trong TARGET_3Y/<target>/selected_symbols_mase_lt_0.75.json
- Ki·ªÉm tra ƒë·ªß artifacts *_best.keras + *_robust_X.pkl
- T·ª± sinh 2 ƒë·∫∑c tr∆∞ng tƒÉng tr∆∞·ªüng close: g_raw_now_log, g_ema_now_log (+ alias)
- Kh·ªõp s·ªë c·ªôt X v·ªõi scaler; log r√µ r√†ng

K·∫øt qu·∫£:
- y_resid_log  : ph·∫ßn d∆∞ (log-return) model tr·∫£ ra
- y_total_pct  : % cu·ªëi c√πng sau khi c·ªông g_raw_now_log v√† quy ƒë·ªïi *100

Ra quy·∫øt ƒë·ªãnh:
- DECISION_SPACE = "PCT" ho·∫∑c "RESID_LOG"

B·ªï sung b·ªô l·ªçc:
- 3 EMA: LONG (ema9 > ema27 > ema72) | SHORT (ema9 < ema27 < ema72) ‚Äî t√≠nh theo INTERVAL giao d·ªãch
- body_strong ƒëa khung: t√≠nh |close - open|/open * 100 v·ªõi ng∆∞·ª°ng theo h∆∞·ªõng LONG/SHORT
  * BODY_STRONG_TFS = ["15m", "30m", "1h"]
  * BODY_STRONG_REQUIRE_MODE = "ANY" ho·∫∑c "ALL"

Th√¥ng b√°o:
- SEND_DISCORD: on/off (webhook t·ª´ discord4.txt)
- SEND_TELEGRAM: on/off (token/chat_id t·ª´ ENV ho·∫∑c file telegram_token.txt / telegram_chat_id.txt)
  * Telegram d√πng parse_mode="HTML" ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp (bold, d·∫•u ƒë·∫ßu d√≤ng, emoji).
"""

import os, time, json, requests
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Set

import numpy as np
import pandas as pd
import joblib
import tensorflow as tf
from tensorflow.keras.models import load_model
import ta
from datetime import datetime, timezone

# ============= C·∫§U H√åNH =============
INTERVAL   = "15m"
WS         = 176
MAX_BARS   = 3000
BATCH_SZ   = 256

# Ch·ªçn mi·ªÅn so ng∆∞·ª°ng: "PCT" (khuy·∫øn ngh·ªã) ho·∫∑c "RESID_LOG"
DECISION_SPACE = "PCT"
THRESH_PCT     = 3      # ¬±3.00% (n·∫øu DECISION_SPACE="PCT")
THRESH_RESID   = 0.30   # ¬±0.30 (log) (n·∫øu DECISION_SPACE="RESID_LOG")

# B·∫≠t/t·∫Øt t·ª´ng target
USE_Y5  = True
USE_Y10 = False
USE_Y15 = False

# ==== B·ªò L·ªåC B·ªî SUNG ====
REQUIRE_3EMA         = False
EMA_SPANS            = (9, 27, 72)   # ema9, ema27, ema72

REQUIRE_BODY_STRONG  = True
BODY_STRONG_PCT      = 0.5           # 0.3% theo y√™u c·∫ßu ban ƒë·∫ßu (t√πy ch·ªânh)
BODY_STRONG_TFS      = ["15m"]
BODY_STRONG_REQUIRE_MODE = "ANY"

# ==== NOTIFY TOGGLES ====
SEND_DISCORD  = True
SEND_TELEGRAM = True

BASE_DIR    = Path(__file__).resolve().parent
SYMBOLS_TXT = BASE_DIR / "symbols.txt"
FEATURES_JS = BASE_DIR / "selected_features_mi38.json"
TARGET_ROOT = BASE_DIR / "TARGET_3Y"

# Discord webhook l∆∞u trong file
DISCORD_TXT = BASE_DIR / "discord4.txt"

# Telegram creds: ENV ∆∞u ti√™n, fallback file
TELEGRAM_TOKEN_TXT  = BASE_DIR / "telegram_token.txt"
TELEGRAM_CHATID_TXT = BASE_DIR / "telegram_chat_id.txt"

BINANCE_BASE = "https://api.binance.com"

# ============= GPU SAFE =============
try:
    for g in tf.config.list_physical_devices("GPU"):
        try: tf.config.experimental.set_memory_growth(g, True)
        except Exception: pass
    tf.config.experimental.enable_tensor_float_32_execution(True)
except Exception:
    pass

# ============= DATA =============
def fetch_klines(symbol: str, interval: str = INTERVAL, limit=1500, max_bars=MAX_BARS) -> pd.DataFrame:
    url = f"{BINANCE_BASE}/api/v3/klines"
    frames = []
    end_ts = int(time.time() * 1000)
    got = 0
    while got < max_bars:
        params = {"symbol": symbol.upper(), "interval": interval,
                  "limit": min(limit, max_bars - got), "endTime": end_ts}
        r = requests.get(url, params=params, timeout=15)
        r.raise_for_status()
        arr = r.json()
        if not arr: break
        df = pd.DataFrame(arr, columns=[
            "open_time","open","high","low","close","volume",
            "close_time","qav","num_trades","taker_base","taker_quote","ignore"
        ]) [["open_time","open","high","low","close","volume"]]
        df["open_time"] = pd.to_datetime(df["open_time"], unit="ms", utc=True)
        for c in ["open","high","low","close","volume"]:
            df[c] = pd.to_numeric(df[c], errors="coerce")
        frames.append(df.dropna())
        got += len(df)
        first_ms = int(df["open_time"].iloc[0].timestamp() * 1000)
        end_ts = first_ms - 1
        if len(df) <= 1: break
    if not frames:
        raise RuntimeError(f"Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Binance ({symbol},{interval}).")
    full = pd.concat(frames, ignore_index=True).sort_values("open_time").reset_index(drop=True)
    return full

def add_all_ta(df: pd.DataFrame) -> pd.DataFrame:
    out = ta.add_all_ta_features(df.copy(), open="open", high="high", low="low",
                                 close="close", volume="volume", fillna=False)
    return out.replace([np.inf, -np.inf], np.nan)

def add_growth_logs(df: pd.DataFrame) -> pd.DataFrame:
    d = df.copy()
    g_raw_log = np.log(d["close"]) - np.log(d["close"].shift(1))
    d["g_raw_now_log"] = g_raw_log
    d["g_raw_now"]     = g_raw_log  # alias

    ema20 = d["close"].ewm(span=20, adjust=False).mean()
    g_ema_log = np.log(ema20) - np.log(ema20.shift(1))
    d["g_ema_now_log"]    = g_ema_log
    d["g_ema_now"]        = g_ema_log
    d["g_ema_now_20"]     = g_ema_log
    d["g_ema_now_log_20"] = g_ema_log
    return d

def read_feature_list() -> List[str]:
    obj = json.loads(FEATURES_JS.read_text(encoding="utf-8"))
    feats = obj.get("features") or obj.get("cols") or obj.get("columns")
    if not isinstance(feats, list) or not feats:
        raise ValueError(f"File features kh√¥ng h·ª£p l·ªá: {FEATURES_JS}")
    return [str(x) for x in feats]

def make_last_window(X_scaled: np.ndarray, ws: int) -> np.ndarray:
    if len(X_scaled) < ws:
        raise RuntimeError(f"Kh√¥ng ƒë·ªß bars ƒë·ªÉ t·∫°o c·ª≠a s·ªï ws={ws}.")
    return X_scaled[-ws:].reshape(1, ws, X_scaled.shape[1]).astype("float32")

# ============= ARTIFACTS =============
def _first_existing(base: Path, patterns: list) -> Optional[Path]:
    for pat in patterns:
        hits = sorted(base.glob(pat))
        if hits: return hits[0]
    return None

def artifact_paths(symbol: str, target: str) -> Tuple[Path, Path]:
    td = TARGET_ROOT / target
    t_std = target.lower()               # 'y_5'
    t_cmp = t_std.replace("_","")        # 'y5'
    model_pat = [
        f"{symbol}_{INTERVAL}_ws{WS}_{t_std}_best.keras",
        f"{symbol}_{INTERVAL}_ws{WS}_{t_cmp}_best.keras",
        f"{symbol}_{INTERVAL}_ws{WS}_{t_std}*.keras",
        f"{symbol}_{INTERVAL}_ws{WS}_{t_cmp}*.keras",
    ]
    scaler_pat = [
        f"{symbol}_{INTERVAL}_ws{WS}_{t_std}_robust_X.pkl",
        f"{symbol}_{INTERVAL}_ws{WS}_{t_cmp}_robust_X.pkl",
        f"{symbol}_{INTERVAL}_ws{WS}_{t_std}_robust_x.pkl",
        f"{symbol}_{INTERVAL}_ws{WS}_{t_cmp}_robust_x.pkl",
    ]
    m = _first_existing(td, model_pat)
    s = _first_existing(td, scaler_pat)
    if m is None or s is None:
        raise FileNotFoundError(f"Kh√¥ng th·∫•y artifact cho {symbol}/{target} t·∫°i {td}")
    print(f"üîó {symbol}/{target}: model={m.name} | scaler={s.name}")
    return m, s

def read_selected_symbols(target: str) -> Set[str]:
    p = TARGET_ROOT / target / "selected_symbols_mase_lt_0.75.json"
    if not p.exists():
        print(f"‚ÑπÔ∏è  {target}: thi·∫øu file selected.")
        return set()
    try:
        obj = json.loads(p.read_text(encoding="utf-8"))
    except Exception as e:
        print(f"‚ö†Ô∏è  {target}: l·ªói ƒë·ªçc JSON ({e})")
        return set()

    syms: List[str] = []
    if isinstance(obj, dict) and isinstance(obj.get("symbols"), dict):
        syms = list(obj["symbols"].keys())
    elif isinstance(obj, dict):
        meta = {"target","interval","window_size","threshold"}
        syms = [k for k in obj.keys() if k not in meta]
    elif isinstance(obj, list):
        syms = obj
    return set(s.strip().upper() for s in syms if str(s).strip())

def load_symbols_txt() -> List[str]:
    if not SYMBOLS_TXT.exists(): return []
    return [s.strip().upper() for s in SYMBOLS_TXT.read_text(encoding="utf-8").splitlines() if s.strip()]

# ============= DISCORD =============
def read_webhook() -> Optional[str]:
    if not DISCORD_TXT.exists(): return None
    return DISCORD_TXT.read_text(encoding="utf-8").strip() or None

def post_discord(webhook: str, payload: Dict) -> None:
    try:
        payload.setdefault("username", "predict_kst")
        payload.setdefault("allowed_mentions", {"parse": []})
        r = requests.post(webhook, json=payload, timeout=10)
        print(f"Discord {r.status_code}")
    except Exception as e:
        print(f"Discord error: {e}")

def discord_embed(symbol: str, direction: str, preds: Dict[str, float], price: float) -> Dict:
    is_long = (direction == "LONG")
    color   = 0x00C853 if is_long else 0xD32F2F
    dot     = "üü¢" if is_long else "üî¥"

    y5_pct   = preds.get("Y_5_%", preds.get("Y5%", 0.0))
    y5_resid = preds.get("Y_5_resid", preds.get("Y5_resid", 0.0))
    y10_pct  = preds.get("Y_10_%", None)
    y15_pct  = preds.get("Y_15_%", None)

    f2 = lambda x: f"{x:.2f}"
    f6 = lambda x: f"{x:.6f}"

    title = f"{dot}  **{direction} | {symbol} ({INTERVAL})**"
    desc_lines = []
    desc_lines.append(f"**Y5**: {f2(y5_pct)}%   ‚Ä¢   **Y‚ÇÖ_resid**: {f2(y5_resid)}")
    extras = []
    if y10_pct is not None: extras.append(f"**Y10**: {f2(y10_pct)}%")
    if y15_pct is not None: extras.append(f"**Y15**: {f2(y15_pct)}%")
    if extras: desc_lines.append("   ‚Ä¢   ".join(extras))
    desc_lines.append(f"**Price**: {f6(price)}")
    description = "\n".join(desc_lines)

    ts_iso = datetime.now(timezone.utc).isoformat().replace("+00:00","Z")
    footer_text = f"ws={WS} ‚Ä¢ LSTM_F3_mi38"
    fields = [
        {"name": "Interval", "value": f"**{INTERVAL}**", "inline": True},
        {"name": "ws",       "value": f"**{WS}**",       "inline": True},
        {"name": "Time",     "value": time.strftime("%H:%M", time.localtime()), "inline": True},
    ]
    return {
        "title": title,
        "description": description,
        "color": color,
        "fields": fields,
        "footer": {"text": footer_text},
        "timestamp": ts_iso,
    }

# ============= TELEGRAM (HTML) =============
def _read_telegram_creds() -> Tuple[Optional[str], Optional[str]]:
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    if not token and TELEGRAM_TOKEN_TXT.exists():
        token = TELEGRAM_TOKEN_TXT.read_text(encoding="utf-8").strip() or None
    if not chat_id and TELEGRAM_CHATID_TXT.exists():
        chat_id = TELEGRAM_CHATID_TXT.read_text(encoding="utf-8").strip() or None
    return token, chat_id

def _html_escape(s: str) -> str:
    # Escape nh·∫π cho HTML parse_mode
    return (s.replace("&","&amp;")
             .replace("<","&lt;")
             .replace(">","&gt;"))

def telegram_message_html(symbol: str, direction: str, preds: Dict[str, float], price: float) -> str:
    """
    Format tin nh·∫Øn Telegram ƒë·∫πp b·∫±ng HTML (bold + emoji).
    """
    dot = "üü¢" if direction == "LONG" else "üî¥"
    f2 = lambda x: f"{x:.2f}"
    f6 = lambda x: f"{x:.6f}"

    y5_pct   = preds.get("Y_5_%", 0.0)
    y5_resid = preds.get("Y_5_resid", 0.0)
    y10_pct  = preds.get("Y_10_%", None)
    y15_pct  = preds.get("Y_15_%", None)

    # Escape t√™n symbol/ph√≤ng h·ªù c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát
    sym_safe = _html_escape(symbol)

    lines = []
    lines.append(f"{dot} <b>{direction}</b> | <b>{sym_safe}</b> ({_html_escape(INTERVAL)})")
    lines.append(f"‚Ä¢ <b>Y5</b>: {f2(y5_pct)}%   ‚Ä¢ <b>Y5_resid</b>: {f2(y5_resid)}")
    extra = []
    if y10_pct is not None: extra.append(f"<b>Y10</b>: {f2(y10_pct)}%")
    if y15_pct is not None: extra.append(f"<b>Y15</b>: {f2(y15_pct)}%")
    if extra: lines.append("‚Ä¢ " + "   ‚Ä¢   ".join(extra))
    lines.append(f"‚Ä¢ <b>Price</b>: {f6(price)}")
    lines.append(f"‚Ä¢ ws={WS} | {time.strftime('%H:%M', time.localtime())}")
    return "\n".join(lines)

def post_telegram(text: str) -> None:
    token, chat_id = _read_telegram_creds()
    if not token or not chat_id:
        print("Telegram disabled/missing creds.")
        return
    try:
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
        }
        r = requests.post(url, data=data, timeout=10)
        print(f"Telegram {r.status_code}")
    except Exception as e:
        print(f"Telegram error: {e}")

# ============= FEATURE ALIGNMENT =============
def ensure_growth_feature_columns(df: pd.DataFrame) -> pd.DataFrame:
    d = df.copy()
    if "g_raw_now_log" not in d.columns or "g_raw_now" not in d.columns:
        g_raw_log = np.log(d["close"]) - np.log(d["close"].shift(1))
        d["g_raw_now_log"] = g_raw_log
        d["g_raw_now"]     = g_raw_log
    need_cols = {"g_ema_now_log","g_ema_now","g_ema_now_20","g_ema_now_log_20"}
    if not need_cols.issubset(set(d.columns)):
        ema20 = d["close"].ewm(span=20, adjust=False).mean()
        g_ema_log = np.log(ema20) - np.log(ema20.shift(1))
        for c in need_cols:
            d[c] = g_ema_log
    return d

def reconcile_features_with_scaler(feats_json: List[str], df: pd.DataFrame, scaler) -> List[str]:
    df = ensure_growth_feature_columns(df)

    feat_in = getattr(scaler, "feature_names_in_", None)
    if feat_in is not None and len(feat_in) > 0:
        alias = {
            "g_raw_now": "g_raw_now_log",
            "g_ema_now": "g_ema_now_log",
            "g_ema_now_20": "g_ema_now_log",
            "g_ema_now_log_20": "g_ema_now_log",
        }
        ordered, missing = [], []
        for name in list(feat_in):
            col = alias.get(name, name)
            if col in df.columns: ordered.append(col)
            else: missing.append(name)
        if missing:
            raise KeyError(f"Thi·∫øu c·ªôt theo scaler.feature_names_in_: {missing}")
        print(f"‚öôÔ∏è  D√πng th·ª© t·ª± scaler.feature_names_in_ ({len(ordered)} c·ªôt).")
        return ordered

    expected = getattr(scaler, "n_features_in_", None)
    if expected is None: return feats_json

    if len(feats_json) != expected:
        new_feats = feats_json[:]
        for c in ["g_raw_now_log","g_ema_now_log","g_raw_now","g_ema_now_log_20"]:
            if len(new_feats) >= expected: break
            if c not in new_feats: new_feats.append(c)
        print(f"‚öôÔ∏è  JSON features = {len(feats_json)} | Scaler expects = {expected} "
              f"-> d√πng {len(new_feats)} c·ªôt (auto-append: {[c for c in new_feats if c not in feats_json]})")
        return new_feats
    return feats_json

# ============= PREDICT =============
def predict_target(symbol: str, target: str, feats_json: List[str]) -> Tuple[float, float, float]:
    model_path, sx_path = artifact_paths(symbol, target)
    model = load_model(model_path, compile=False)
    sx    = joblib.load(sx_path)

    raw = fetch_klines(symbol, interval=INTERVAL)
    df  = add_all_ta(raw)
    df  = add_growth_logs(df)
    feats = reconcile_features_with_scaler(feats_json, df, sx)

    X_df = df[feats].ffill().bfill().replace([np.inf,-np.inf],0)
    print(f"‚úÖ X_df shape = {X_df.shape}, scaler expects {sx.n_features_in_}")
    assert X_df.shape[1] == sx.n_features_in_, "Mismatch s·ªë c·ªôt X so v·ªõi scaler!"

    X_scaled = sx.transform(X_df.values.astype("float32"))
    X_last = make_last_window(X_scaled, WS)
    yhat = model.predict(X_last, verbose=0, batch_size=BATCH_SZ)
    y_resid_log = float(np.ravel(yhat)[0])

    g_raw_now_log = float(df["g_raw_now_log"].iloc[-1])
    y_total_log = y_resid_log + g_raw_now_log
    y_total_pct = (np.exp(y_total_log) - 1) * 100.0

    last_price = float(df["close"].iloc[-1])
    return y_resid_log, y_total_pct, last_price

def decide_direction(value: float, threshold: float) -> Optional[str]:
    if value >  threshold: return "LONG"
    if value < -threshold: return "SHORT"
    return None

# ============= B·ªò L·ªåC 3EMA & BODY (ƒëa khung) =============
def get_ema_flags(symbol: str) -> Dict[str, float]:
    """
    EMA filter lu√¥n t√≠nh theo INTERVAL giao d·ªãch (v√≠ d·ª•: 15m).
    """
    try:
        df = fetch_klines(symbol, interval=INTERVAL, limit=1000, max_bars=240)  # ƒë·ªß cho ema72
        close = df["close"]
        ema9  = close.ewm(span=EMA_SPANS[0], adjust=False).mean().iloc[-1]
        ema27 = close.ewm(span=EMA_SPANS[1], adjust=False).mean().iloc[-1]
        ema72 = close.ewm(span=EMA_SPANS[2], adjust=False).mean().iloc[-1]
        return {
            "ema9": float(ema9),
            "ema27": float(ema27),
            "ema72": float(ema72),
            "ema_up":  bool(ema9 > ema27 > ema72),
            "ema_down":bool(ema9 < ema27 < ema72),
        }
    except Exception as e:
        print(f"‚ö†Ô∏è  L·ªói t√≠nh 3EMA cho {symbol}: {e}")
        return {"ema9": np.nan, "ema27": np.nan, "ema72": np.nan, "ema_up": False, "ema_down": False}

def get_body_pcts(symbol: str, tfs: List[str]) -> Dict[str, float]:
    """
    Tr·∫£ v·ªÅ dict {tf: body_pct} cho m·ªói khung trong tfs.
    body_pct = (close - open)/open * 100 c·ªßa c√¢y n·∫øn m·ªõi nh·∫•t ·ªü khung ƒë√≥.
    """
    out: Dict[str, float] = {}
    for tf in tfs:
        try:
            df = fetch_klines(symbol, interval=tf, limit=200, max_bars=200)
            body_pct = (df["close"].iloc[-1] - df["open"].iloc[-1]) / df["open"].iloc[-1] * 100.0
            out[tf] = float(body_pct)
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói t√≠nh body_pct {symbol}@{tf}: {e}")
            out[tf] = np.nan
    return out

def body_pass(direction: str, body_map: Dict[str, float], threshold_pct: float, mode: str = "ANY") -> Tuple[bool, str]:
    """
    Ki·ªÉm tra body_strong theo nhi·ªÅu khung:
      - direction: "LONG" ho·∫∑c "SHORT"
      - body_map: {tf: body_pct}
      - threshold_pct: v√≠ d·ª• 0.3
      - mode: "ANY" (>= 1 tf ƒë·∫°t) ho·∫∑c "ALL" (m·ªçi tf ƒë·ªÅu ƒë·∫°t)
    """
    if not body_map:
        return False, "Kh√¥ng t√≠nh ƒë∆∞·ª£c body_pct ·ªü b·∫•t k·ª≥ khung n√†o"
    checks = []
    for tf, bp in body_map.items():
        if np.isnan(bp):
            checks.append(False)
            continue
        if direction == "LONG":
            checks.append(bp >= threshold_pct)
        else:
            checks.append(bp <= -threshold_pct)
    if mode.upper() == "ALL":
        ok = all(checks) if checks else False
    else:
        ok = any(checks) if checks else False

    if ok:
        passed = [tf for (tf, bp) in body_map.items()
                  if not np.isnan(bp) and ((bp >= threshold_pct) if direction=="LONG" else (bp <= -threshold_pct))]
        reason = f"OK body({mode}): " + ", ".join([f"{tf}={body_map[tf]:.3f}%" for tf in passed])
    else:
        reason = f"Lo·∫°i body({mode}): " + ", ".join([f"{tf}={bp:.3f}%" for tf, bp in body_map.items() if not np.isnan(bp)])
    return ok, reason

def pass_filters_for(direction: str, ema_info: Dict[str, float], body_tfs: List[str]) -> Tuple[bool, str]:
    """
    Tr·∫£ v·ªÅ (ok, reason_if_fail) cho to√†n b·ªô b·ªô l·ªçc.
    - 3EMA: theo INTERVAL
    - body_strong: theo danh s√°ch BODY_STRONG_TFS v√† ch·∫ø ƒë·ªô BODY_STRONG_REQUIRE_MODE
    """
    # 3 EMA
    if REQUIRE_3EMA:
        if direction == "LONG" and not ema_info["ema_up"]:
            return False, (f"Lo·∫°i: 3EMA kh√¥ng up (ema9={ema_info['ema9']:.4f} ‚â§/‚â• "
                           f"ema27={ema_info['ema27']:.4f} ‚â§/‚â• ema72={ema_info['ema72']:.4f})")
        if direction == "SHORT" and not ema_info["ema_down"]:
            return False, (f"Lo·∫°i: 3EMA kh√¥ng down (ema9={ema_info['ema9']:.4f} ‚â•/‚â§ "
                           f"ema27={ema_info['ema27']:.4f} ‚â•/‚â§ ema72={ema_info['ema72']:.4f})")
    # Body strong ƒëa khung
    if REQUIRE_BODY_STRONG:
        body_map = get_body_pcts(symbol, body_tfs)  # <- c·∫ßn symbol; truy·ªÅn b·∫±ng closure trong main
        ok, why = body_pass(direction, body_map, BODY_STRONG_PCT, BODY_STRONG_REQUIRE_MODE)
        if not ok:
            return False, why
        return True, why  # why ·ªü ƒë√¢y l√† th√¥ng ƒëi·ªáp OK chi ti·∫øt
    return True, ""

# ============= MAIN =============
def main():
    print(f"USE_Y5={USE_Y5} | USE_Y10={USE_Y10} | USE_Y15={USE_Y15} | "
          f"DECISION_SPACE={DECISION_SPACE} | THRESH={'¬±'+str(THRESH_PCT)+'%' if DECISION_SPACE=='PCT' else '¬±'+str(THRESH_RESID)}")
    print(f"[FILTERS] 3EMA={REQUIRE_3EMA} (spans={EMA_SPANS}) | "
          f"body_strong={REQUIRE_BODY_STRONG} (‚â•{BODY_STRONG_PCT}%, TFS={BODY_STRONG_TFS}, MODE={BODY_STRONG_REQUIRE_MODE})")
    print(f"[NOTIFY] SEND_DISCORD={SEND_DISCORD} | SEND_TELEGRAM={SEND_TELEGRAM}")

    enabled = [t for t,flag in [("Y_5",USE_Y5),("Y_10",USE_Y10),("Y_15",USE_Y15)] if flag]
    if not enabled:
        print("‚ö†Ô∏è Kh√¥ng c√≥ target n√†o ƒë∆∞·ª£c b·∫≠t."); return

    syms_main = load_symbols_txt()
    if not syms_main:
        print("‚ö†Ô∏è Kh√¥ng th·∫•y symbols.txt"); return

    feats_json = read_feature_list()
    webhook = read_webhook() if SEND_DISCORD else None
    tg_token, tg_chat = _read_telegram_creds() if SEND_TELEGRAM else (None, None)

    selected: Dict[str, Set[str]] = {}
    for t in enabled:
        selected[t] = read_selected_symbols(t)
        inter = set(syms_main) & selected[t]
        print(f"üîé {t}: selected={len(selected[t])} | symbols.txt={len(syms_main)} | giao={len(inter)}")

    # ------------ CH√ö √ù: pass_filters_for c·∫ßn symbol ƒë·ªÉ t√≠nh body ƒëa khung ------------
    def run_filters(direction: str, sym: str) -> Tuple[bool, str]:
        ema_info = get_ema_flags(sym)  # theo INTERVAL giao d·ªãch
        # Truy·ªÅn 'symbol' v√†o scope cho pass_filters_for
        global symbol
        symbol = sym
        try:
            return pass_filters_for(direction, ema_info, BODY_STRONG_TFS)
        finally:
            symbol = None

    for sym in syms_main:
        try:
            preds_show: Dict[str, float] = {}
            base_direction: Optional[str] = None
            last_price_for_embed: float = 0.0

            for t in enabled:
                if sym not in selected[t]:
                    print(f"‚è≠  B·ªè {sym} ({t} not selected)")
                    base_direction = None
                    break

                y_resid_log, y_total_pct, last_price = predict_target(sym, t, feats_json)
                last_price_for_embed = last_price
                print(f"[{sym}] {t}: resid_log={y_resid_log:.4f} | total%={y_total_pct:.2f}")

                if DECISION_SPACE == "PCT":
                    dir_t = decide_direction(y_total_pct, THRESH_PCT)
                    preds_show[f"{t}_%"] = y_total_pct
                else:
                    dir_t = decide_direction(y_resid_log, THRESH_RESID)
                    preds_show[f"{t}_resid"] = y_resid_log

                preds_show[f"{t}_resid"] = y_resid_log
                preds_show[f"{t}_%"]     = y_total_pct

                print(f"‚Üí {t} direction: {dir_t or 'NEUTRAL'}")

                if base_direction is None:
                    if dir_t is None:
                        base_direction = None
                        break
                    base_direction = dir_t
                else:
                    if dir_t != base_direction:
                        base_direction = None
                        break

            # ---- √Åp d·ª•ng b·ªô l·ªçc b·ªï sung sau khi ƒë√£ c√≥ base_direction h·ª£p l·ªá
            if base_direction:
                ok, why = run_filters(base_direction, sym)
                if not ok:
                    print(f"üö´ {sym} {base_direction} b·ªã lo·∫°i b·ªüi b·ªô l·ªçc: {why}")
                    base_direction = None  # h·ªßy t√≠n hi·ªáu
                else:
                    print(f"‚úÖ {sym} {base_direction} qua l·ªçc: {why}")

            if base_direction:
                print(f"‚úÖ SIGNAL {base_direction} | {sym} | {preds_show}")

                # Discord
                if SEND_DISCORD and webhook:
                    embed = discord_embed(sym, base_direction, preds_show, last_price_for_embed)
                    post_discord(webhook, {"embeds":[embed]})
                elif SEND_DISCORD and not webhook:
                    print("Discord enabled nh∆∞ng thi·∫øu webhook (discord4.txt).")

                # Telegram (HTML)
                if SEND_TELEGRAM:
                    if tg_token and tg_chat:
                        text = telegram_message_html(sym, base_direction, preds_show, last_price_for_embed)
                        post_telegram(text)
                    else:
                        print("Telegram enabled nh∆∞ng thi·∫øu TOKEN/CHAT_ID (ENV ho·∫∑c file).")

        except FileNotFoundError as e:
            print(f"‚ùå {sym}: {e}")
        except Exception as e:
            print(f"‚ùå {sym}: {e}")

    print("Done.")

if __name__ == "__main__":
    os.environ.setdefault("TF_CPP_MIN_LOG_LEVEL","2")
    main()
